{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","App","useState","persons","setPersons","newName","setNewName","newPhone","setPhone","newFilter","setNewFilter","errorMessage","setErrorMessage","Message","setMessage","useEffect","personService","alkup","addName","event","preventDefault","findIndex","person","name","window","confirm","find","console","log","number","nimet","setTimeout","catch","error","filter","concat","handleNameChange","target","value","handlePhone","handleRajaus","onChange","onSubmit","type","message","className","naytettavat","length","toLowerCase","includes","map","key","onClick","deleteName","rows","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7084bb06.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst muuta = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\n\n\nexport default { getAll, create, deletePerson, muuta}","\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport personService from './services/persons' \n\nconst App = () => {\n  const [persons, setPersons] = useState([  ])\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setPhone ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [Message, setMessage] = useState(null)\n\n\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  const Onnistui = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"onnistui\">\n        {message}\n      </div>\n    )\n  }\n\n\n  \n\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(alkup => setPersons(alkup))\n  }, [])\n\n  const deleteName = (person) => {\n\n    if (window.confirm(`Delete ${person.name} ? `)) { \n      personService\n    .deletePerson(person.id)\n    .then(response => {\n      console.log('success!')\n      personService\n      .getAll()\n      .then(nimet => setPersons(nimet))\n\n      setMessage(\n        `Poistaminen onnistui!!`\n      )\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Poistaminen ei onnistunut!`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    })\n    }\n    \n    console.log(\"iidee on:\", person.id)\n \n    \n\n    \n}\n\n  \n  \n\n\n  const addName = (event) => {\n    event.preventDefault()\n\n\n    if (persons.findIndex(person => person.name === newName) > -1) {\n      \n      if (window.confirm(`Nimi ${newName} on jo lisätty, vaihdetaanko numero uuteen?`)) { \n\n        const id = persons.find(person => person.name === newName).id\n\n        console.log(\"idee\", id)\n\n        const nameObject = {\n\t\t\t\t\tname: newName,\n\t\t\t\t\tnumber: newPhone,\n\t\t\t\t}\n\n        personService\n          .muuta(id, nameObject)\n          .then(response => {\n            console.log('muuttaminen onnistui!')\n            personService\n            .getAll()\n            .then(nimet => setPersons(nimet))\n\n            setMessage(\n              `Numeron muuttaminen onnistui!!`\n            )\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n\n          })\n          .catch(error => {\n            setErrorMessage(\n              `Numeron muuttaminen ei onnistunut, yhteystietoa ei löydy!!`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n\n            setPersons(persons.filter(person => person.id !== id))\n\n          })\n\n      }\n    }\n    else {\n\n    console.log(\"button clicked\", newName)\n    const nameObject = {\n      name: newName,\n      number: newPhone\n    }\n    personService\n    .create(nameObject)\n    .then(data => {\n      setPersons(persons.concat(data))\n\n      setMessage(\n        `Numeron lisääminen onnistui!`\n      )\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n      \n    })\n    .catch(error => {\n      setErrorMessage(error.response.data.error\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n\n    })\n}\n  }\n\n  const handleNameChange = (event) => {\n    \n    \n    setNewName(event.target.value)\n  }\n\n  const handlePhone = (event) => {\n    \n    \n    setPhone(event.target.value)\n  }\n\n  const handleRajaus = (event) => {\n    console.log(event.target.value)\n\n    setNewFilter(event.target.value)\n    \n    \n  }\n\n  const rows = () => {\n    \n    console.log(\"jaa\", persons)\n    \n    var naytettavat = persons;\n    \n   if (naytettavat.length < 10) {\n    \n    if (newFilter.length > 0 ) {\n\n      naytettavat = persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n      \n      return (\n\n\n\n        naytettavat.map(person =>\n          <div key={person.name}>\n           \n            {person.name} {person.number}\n            \n          </div>\n          \n          )\n        )\n\n    }\n\n    else return (\n    persons.map(person =>\n      <div key={person.name}>\n       \n        {person.name} {person.number} <button onClick={() => deleteName(person)}>\n  Delete\n</button>\n        \n      </div>\n      \n      )\n    )\n   }\n  }\n  \n  const forms = () => {\n\n    return (\n\n    <form onSubmit={addName}>\n        <div>\n          Nimi: <input onChange={handleNameChange} />\n          <br></br>\n          Numero: <input onChange={handlePhone} />\n        </div>\n        <div>\n          <button type=\"submit\">Lisää</button>\n        </div>\n      </form>\n    )\n\n  }\n\n  const rajaus = () => {\n\n    return (\n    <div>\n      Rajaus: <input onChange={handleRajaus} />\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h2>PUHELINLUETTELO</h2>\n\n      {rajaus()}\n\n      <h3>Lisää uusi</h3>\n\n      {forms()}\n\n      <Notification message={errorMessage} />\n      <Onnistui message={Message} />\n      <h3>Numerot</h3>\n      {rows()}\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}